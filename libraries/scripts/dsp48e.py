from myhdl import *

def dsp48e_wrapper (block_name,

      #========
      # Ports
      #========
      ACASCREG,
      ADREG,
      ALUMODEREG,
      AREG,
      AUTORESET_PATDET,
      A_INPUT,
      BCASCREG,
      BREG,
      B_INPUT,
      CARRYINREG,
      CARRYINSELREG,
      CREG,
      DREG,
      INMODEREG,
      MASK,
      MREG,
      OPMODEREG,
      PATTERN,
      PREG,
      SEL_MASK,
      SEL_PATTERN,
      USE_DPORT,
      USE_MULT,
      USE_PATTERN_DETECT,
      USE_SIMD,

      #=============
      # Parameters
      #=============
      ACOUT,
      BCOUT,
      CARRYCASCOUT,
      MULTSIGNOUT,
      PCOUT,
      OVERFLOW,
      PATTERNBDETECT,
      PATTERNDETECT,
      UNDERFLOW,
      CARRYOUT,
      P,
      ACIN,
      BCIN,
      CARRYCASCIN,
      MULTSIGNIN,
      PCIN,
      ALUMODE,
      CARRYINSEL,
      CEINMODE,
      CLK,
      INMODE,
      OPMODE,
      RSTINMODE,
      A,
      B,
      C,
      CARRYIN,
      D,
      CEA1,
      CEA2,
      CEAD,
      CEALUMODE,
      CEB1,
      CEB2,
      CEC,
      CECARRYIN,
      CECTRL,
      CED,
      CEM,
      CEP,
      RSTA,
      RSTALLCARRYIN,
      RSTALUMODE,
      RSTB,
      RSTC,
      RSTCTRL,
      RSTD,
      RSTM,
      RSTP
   ):

   #===================
   # Simulation Logic
   #===================
   @always(CLK)
   def logic():
      pass

   return logic

#======================
# dsp48e Instantiation
#======================
dsp48e_wrapper.verilog_code = \
"""
dsp48e
#(
   .ACASCREG($ACASCREG),
   .ADREG($ADREG),
   .ALUMODEREG($ALUMODEREG),
   .AREG($AREG),
   .AUTORESET_PATDET($AUTORESET_PATDET),
   .A_INPUT($A_INPUT),
   .BCASCREG($BCASCREG),
   .BREG($BREG),
   .B_INPUT($B_INPUT),
   .CARRYINREG($CARRYINREG),
   .CARRYINSELREG($CARRYINSELREG),
   .CREG($CREG),
   .DREG($DREG),
   .INMODEREG($INMODEREG),
   .MASK($MASK),
   .MREG($MREG),
   .OPMODEREG($OPMODEREG),
   .PATTERN($PATTERN),
   .PREG($PREG),
   .SEL_MASK($SEL_MASK),
   .SEL_PATTERN($SEL_PATTERN),
   .USE_DPORT($USE_DPORT),
   .USE_MULT($USE_MULT),
   .USE_PATTERN_DETECT($USE_PATTERN_DETECT),
   .USE_SIMD($USE_SIMD)
) dsp48e_$block_name (
   .ACOUT($ACOUT),
   .BCOUT($BCOUT),
   .CARRYCASCOUT($CARRYCASCOUT),
   .MULTSIGNOUT($MULTSIGNOUT),
   .PCOUT($PCOUT),
   .OVERFLOW($OVERFLOW),
   .PATTERNBDETECT($PATTERNBDETECT),
   .PATTERNDETECT($PATTERNDETECT),
   .UNDERFLOW($UNDERFLOW),
   .CARRYOUT($CARRYOUT),
   .P($P),
   .ACIN($ACIN),
   .BCIN($BCIN),
   .CARRYCASCIN($CARRYCASCIN),
   .MULTSIGNIN($MULTSIGNIN),
   .PCIN($PCIN),
   .ALUMODE($ALUMODE),
   .CARRYINSEL($CARRYINSEL),
   .CEINMODE($CEINMODE),
   .CLK($CLK),
   .INMODE($INMODE),
   .OPMODE($OPMODE),
   .RSTINMODE($RSTINMODE),
   .A($A),
   .B($B),
   .C($C),
   .CARRYIN($CARRYIN),
   .D($D),
   .CEA1($CEA1),
   .CEA2($CEA2),
   .CEAD($CEAD),
   .CEALUMODE($CEALUMODE),
   .CEB1($CEB1),
   .CEB2($CEB2),
   .CEC($CEC),
   .CECARRYIN($CECARRYIN),
   .CECTRL($CECTRL),
   .CED($CED),
   .CEM($CEM),
   .CEP($CEP),
   .RSTA($RSTA),
   .RSTALLCARRYIN($RSTALLCARRYIN),
   .RSTALUMODE($RSTALUMODE),
   .RSTB($RSTB),
   .RSTC($RSTC),
   .RSTCTRL($RSTCTRL),
   .RSTD($RSTD),
   .RSTM($RSTM),
   .RSTP($RSTP)
);
"""

#=======================================
# For testing of conversion to verilog
#=======================================
def convert():

   ACASCREG, ADREG, ALUMODEREG, AREG, AUTORESET_PATDET, A_INPUT, BCASCREG, BREG, B_INPUT, CARRYINREG, CARRYINSELREG, CREG, DREG, INMODEREG, MASK, MREG, OPMODEREG, PATTERN, PREG, SEL_MASK, SEL_PATTERN, USE_DPORT, USE_MULT, USE_PATTERN_DETECT, USE_SIMD, ACOUT, BCOUT, CARRYCASCOUT, MULTSIGNOUT, PCOUT, OVERFLOW, PATTERNBDETECT, PATTERNDETECT, UNDERFLOW, CARRYOUT, P, ACIN, BCIN, CARRYCASCIN, MULTSIGNIN, PCIN, ALUMODE, CARRYINSEL, CEINMODE, CLK, INMODE, OPMODE, RSTINMODE, A, B, C, CARRYIN, D, CEA1, CEA2, CEAD, CEALUMODE, CEB1, CEB2, CEC, CECARRYIN, CECTRL, CED, CEM, CEP, RSTA, RSTALLCARRYIN, RSTALUMODE, RSTB, RSTC, RSTCTRL, RSTD, RSTM, RSTP = [Signal(bool(0)) for i in range(74)]

   toVerilog(dsp48e_wrapper, block_name="inst", ACASCREG = ACASCREG, ADREG = ADREG, ALUMODEREG = ALUMODEREG, AREG = AREG, AUTORESET_PATDET = AUTORESET_PATDET, A_INPUT = A_INPUT, BCASCREG = BCASCREG, BREG = BREG, B_INPUT = B_INPUT, CARRYINREG = CARRYINREG, CARRYINSELREG = CARRYINSELREG, CREG = CREG, DREG = DREG, INMODEREG = INMODEREG, MASK = MASK, MREG = MREG, OPMODEREG = OPMODEREG, PATTERN = PATTERN, PREG = PREG, SEL_MASK = SEL_MASK, SEL_PATTERN = SEL_PATTERN, USE_DPORT = USE_DPORT, USE_MULT = USE_MULT, USE_PATTERN_DETECT = USE_PATTERN_DETECT, USE_SIMD = USE_SIMD, ACOUT = ACOUT, BCOUT = BCOUT, CARRYCASCOUT = CARRYCASCOUT, MULTSIGNOUT = MULTSIGNOUT, PCOUT = PCOUT, OVERFLOW = OVERFLOW, PATTERNBDETECT = PATTERNBDETECT, PATTERNDETECT = PATTERNDETECT, UNDERFLOW = UNDERFLOW, CARRYOUT = CARRYOUT, P = P, ACIN = ACIN, BCIN = BCIN, CARRYCASCIN = CARRYCASCIN, MULTSIGNIN = MULTSIGNIN, PCIN = PCIN, ALUMODE = ALUMODE, CARRYINSEL = CARRYINSEL, CEINMODE = CEINMODE, CLK = CLK, INMODE = INMODE, OPMODE = OPMODE, RSTINMODE = RSTINMODE, A = A, B = B, C = C, CARRYIN = CARRYIN, D = D, CEA1 = CEA1, CEA2 = CEA2, CEAD = CEAD, CEALUMODE = CEALUMODE, CEB1 = CEB1, CEB2 = CEB2, CEC = CEC, CECARRYIN = CECARRYIN, CECTRL = CECTRL, CED = CED, CEM = CEM, CEP = CEP, RSTA = RSTA, RSTALLCARRYIN = RSTALLCARRYIN, RSTALUMODE = RSTALUMODE, RSTB = RSTB, RSTC = RSTC, RSTCTRL = RSTCTRL, RSTD = RSTD, RSTM = RSTM, RSTP = RSTP)

if __name__ == "__main__":
   convert()
